snippet docs
	'''
	File: ${1:<+`Filename('$1.py', 'foo.py')`+>}
	Author: ${2:<+`g:snips_author`+>}
	Description: ${3:<++>}
	'''
snippet wh
	while ${1:<+condition+>}:
		${2:# <+code...+>}
snippet for
	for ${1:<+needle+>} in ${2:<+haystack+>}:
		${3:# <+code...+>}
# New Class
snippet cl
	class ${1:<+ClassName+>}(${2:<+object+>}):
		"""${3:<+docstring for+> $1}"""
		def __init__(self, ${4:<+arg+>}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6:<++>}
# New Function
snippet def
	def ${1:<+fname+>}(${2:<+`indent('.') ? 'self' : ''`+>}):
		"""${3:<+docstring for $1+>}"""
		${4:<+pass+>}
# New Method
snippet defs
	def ${1:<+mname+>}(self, ${2:<+arg+>})):
		${3:<+pass+>}
# New Property
snippet property
	def ${1:<+foo+>}():
		doc = "${2:<+The $1 property.+>}"
		def fget(self):
			${3:<+return self._$1+>}
		def fset(self, value):
			${4:<+self._$1 = value+>}
snippet .
	self.
snippet try Try/Except
	try:
		${1:<+pass+>}
	except ${2:<+Exception+>}, ${3:<+e+>}:
		${4:<+raise $3+>}
snippet try Try/Except/Else
	try:
		${1:<+pass+>}
	except ${2:<+Exception+>}, ${3:<+e+>}:
		${4:<+raise+> $3}
	else:
		${5:<+pass+>}
snippet try Try/Except/Finally
	try:
		${1:<+pass+>}
	except ${2:<+Exception+>}, ${3:<+e+>}:
		${4:<+raise+> $3}
	finally:
		${5:<+pass+>}
snippet try Try/Except/Else/Finally
	try:
		${1:<+pass+>}
	except ${2:<+Exception+>}, ${3:<+e+>}:
		${4:<+raise $3+>}
	else:
		${5:<+pass+>}
	finally:
		${6:<+pass+>}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:<+main()+>}
# __magic__
snippet _
	__${1:<+init+>}__${2:<++>}
# matplotlib
snippet mpl
	'''
	${1:写上这个程序是用来做什么用的}

	'''

	import matplotlib.pyplot as plt
	import matplotlib as mpl
	import numpy
	
	#mpl.rcParams['text.usetex'] = True

	${2:<++>}
snippet plt
	fig = plt.figure()
	ax = fig.add_subplot(${1:111})

	#ax.set_aspect(1)
	#ax.grid(True)

	x = ${2:<++>}
	y = ${3:<++>}

	line1, = ax.plot(x, y,)

	ax.axis([<++>])

	plt.show()
snippet #!
	# -*- coding: utf-8 -*-

snippet #!tornado
	# -*- coding: utf-8 -*-

	import uuid
	import os
	from os.path import join
	import sys
	sys.path.insert(0, os.path.dirname(__file__))
	sys.path.insert(0, join(os.path.dirname(__file__), '..'))

	import logging
	import tornado.httpserver
	import tornado.ioloop
	import tornado.options
	import tornado.web
	from tornado.options import define, options

	define("port", default=8888, help=u"指定启动端口", type=int)

	tornado.options.parse_command_line()
	IL = tornado.ioloop.IOLoop.instance()

	logger = logging.getLogger('PROJECT')

	logger.propagate = False
	logger.setLevel(logging.DEBUG)
	fmt = logging.Formatter('[%(name)s][%(asctime)s][%(filename)s,%(lineno)s][%(levelname)s]%(message)s', '%Y-%m-%d %H:%M:%S')

	stream_hd = logging.StreamHandler()
	stream_hd.setFormatter(fmt)
	stream_hd.setLevel(logging.INFO)
	logger.addHandler(stream_hd)


	class BaseHandler(tornado.web.RequestHandler):
		SUPPORTED_METHODS = ()

		def initialize(self):
			'处理构建特殊方法'

			_method = self.get_argument('_method', None)
			if _method is not None:
				self.request.method = _method.upper()
			self.uuid = uuid.uuid4().hex
			self.request.uuid = self.uuid


	class IndexHandler(BaseHandler):
		SUPPORTED_METHODS = ('GET',)
		def get(self):
			self.write('ok')


	Handlers = (
		(r"/", IndexHandler),
	)


	class Application(tornado.web.Application):
		def __init__(self):
			settings = dict(
				static_path = join(os.path.dirname(__file__), "static"),
				template_path = join(os.path.dirname(__file__), "template"),
				debug=True,
			)
			self.visit_logger = logging.getLogger('PROJECT')
			tornado.web.Application.__init__(self, Handlers, **settings)

		def log_request(self, handler):
			'记录一次请求'

			status = handler.get_status()
			if status < 400:
				log_method = self.visit_logger.info
			elif status < 500:
				log_method = self.visit_logger.warning
			else:
				log_method = self.visit_logger.error
			request_time = 1000.0 * handler.request.request_time()

			rq = handler.request
			h = rq.headers

			msg = '|'.join([getattr(handler, 'uuid', ''),
							rq.remote_ip,
							h.get('Referer', ''),
							rq.path,
							rq.method,
							str(rq.arguments),
							str(handler.get_status()),
							'%.2f' % request_time,
							h.get('User-Agent', ''),
							h.get('Accept-Language', ''),
						   ])

			if status < 400:
				log_method(msg)
			else:
				log_method(msg, exc_info=True)


	def main():
		app = Application()
		http_server = tornado.httpserver.HTTPServer(app, xheaders=True)
		http_server.listen(options.port)
		print 'starting on %s ...' % options.port
		IL.start()
		


	if __name__ == "__main__":
		main()


